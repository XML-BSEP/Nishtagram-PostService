version: '3.8' # 2.4 is the last version that supports depends_on conditions for service health

volumes:
    cassandra-data: {} 
    cassandra-post-data: {} 
    cassandra-story-data: {} 
    redis-data: {}
    redis.conf: {}
    auth-redis-data: {}
    auth-redis.conf: {}
    follow-data: {}
    search-data: {}
    user-data: {}
    auth-data: {}
    etc-krakend : {}

networks:
  cassandra:  # docker network where all cassandra nodes will be put in
  # node_net:
  #   ipam:
  #     driver: default
  #     config:
  #       - subnet: 172.28.0.0/16
  
services:
    auth:
      image: postgres:latest
      container_name: auth
      restart: always
      ports: 
        - 5432:5432
      environment:
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "root"
        POSTGRES_DB: authentication
      # networks:
      #   - node_net
      volumes:
        - auth-data:/var/lib/auth


    tracing:
      image: jaegertracing/all-in-one
      container_name: jaeger
      ports:
        - "6831:6831/udp"
        - "6832:6832/udp"
        - "16686:16686"
        - "14268:14268"
        - "14250:14250"
      

    cassandra_post:
      image: cassandra:3.11.8   # better to use a specific version, if you want to control upgrades
      container_name: cassandra_post
      mem_limit: 2g  # It's not strictly required, but it's better to have some memory limit
      ports:
        - 7000:9042
      expose: 
        - 7000
      volumes:
        - cassandra-post-data:/var/lib/cassandra


    cassandra_story:
      image: cassandra:3.11.8   # better to use a specific version, if you want to control upgrades
      container_name: cassandra_story
      mem_limit: 2g  # It's not strictly required, but it's better to have some memory limit
      ports:
        - 7001:9042
      volumes:
        - cassandra-story-data:/var/lib/cassandra
      
    redis:
      image: "redis:alpine"
      command: redis-server
      ports:
        - "6378:6379"
      volumes:
        - redis-data:/var/lib/redis
        - redis.conf:/usr/local/etc/redis/redis.conf
      environment:
        - REDIS_REPLICATION_MODE=master
      networks:
        node_net:
          ipv4_address: 172.28.1.4
    # authredis:
    #   image: "redis:alpine"
    #   command: redis-server
    #   ports:
    #     - "6380:6379"
    #   volumes:
    #     - auth-redis-data:/var/lib/redis
    #     - auth-redis.conf:/usr/local/etc/redis/redis.conf
    #   environment:
    #     - REDIS_REPLICATION_MODE=master
    #   networks:
    #     node_net:
    #       ipv4_address: 172.28.1.5

    # mongo-follow:
    #   image: 'mongo:4.2.6-bionic'
    #   container_name: mongo-follow
    #   ports:
    #     - '27017:27017'
    #   volumes:
    #     - follow-data:/data/db
    #   restart: always

    #Mongo Express Web-based MongoDB admin interface
    

    # mongo-user:
    #   image: 'mongo:4.2.6-bionic'
    #   container_name: mongo-user
    #   ports:
    #     - '27018:27017'
    #   volumes:
    #     - user-data:/data/db
    #   restart: always

    # Mongo Express Web-based MongoDB admin interface
  

    # mongo-search:
    #   image: 'mongo:4.2.6-bionic'
    #   container_name: mongo-search
    #   ports:
    #     - '27019:27017'
    #   volumes:
    #     - search-data:/data/db
    #   restart: always
